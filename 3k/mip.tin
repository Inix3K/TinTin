#CLASS {mip} {kill}
#CLASS {mip} {open}
#NOP REQUIRED:  draw.tin  //Used for drawing chats and caption

/* !NOTE! */
#NOP If your guild hides the hpbar with MIP turned on, try using the mud command 'forcehp'

#NOP ***** Set MIP ID Code **********
#VAR {mip} {}
#LOOP {1} {5} {i} {
	#MATH {temp[digit]} {1d10 - 1};
	#VAR {mip[id]} {$mip[id]$temp[digit]}
}
#UNVAR {temp[digit]}
#info system save

#NOP ***** Kick Off MIP *************
#DELAY {2} {
	#SEND 3klient $mip[id]~~$info[SYSTEM][CLIENT_NAME]$info[SYSTEM][CLIENT_VERSION];
	#SEND 3klient LINEFEED on;
	#SEND 3klient HAA off
}

#NOP ***** Extract Raw Data *********
#var mip[echo] off
#ACTION {{^(?:\] )?\#K\%$mip[id](.{3})(.{3})(.*)}$} {
	#VAR {mip[source]} {%0};
	#VAR {mip[%3][data]} {%4};
	.mipProcessFlag {%3} {%4};

	#IF {"$mip[echo]" != "on"} {
		#LINE GAG
	}
} {1}

#ALIAS {update_caption} {
	#format {world_cap}	{%-8s}	{$world};
	#format {world_cap}	{%n}	{$world_cap};
	#format {uptime_cap}	{%+8s}	{$session[uptime]};
	#format {reboot_cap}	{%+5s}	{$session[reboot]};
	#format {lag_cap}	{%+4s}	{$session[lag]};
	#math	{idle_hr}	{$idle / 3600};
	#math	{idle_min}	{$idle % 3600 / 60};
	#math	{idle_sec}	{$idle % 60};
	#if	{$idle_hr < 10}	{#var idle_hr  0$idle_hr};
	#if	{$idle_min < 10}{#var idle_min 0$idle_min};
	#if	{$idle_sec < 10}{#var idle_sec 0$idle_sec};
	#format {idle_cap}	{%+4s}	{<268>[<128>$idle_hr<268>:<128>$idle_min<268>:<128>$idle_sec<268>]<088>};
	#if	{&{botcycle[]} > 0} {
		#var {areacap} {<148>Cycle: <168>$cycle<148>\-<168>$botcycle[$cycle]<088>}
	} {
		#var areacap {};	
	};
	#if {"$draw[caption]" == "on"} {
		#SHOWME {<088> <128>$world_cap <068>Uptime: <168>$uptime_cap  <038>Reboot: <138>$reboot_cap  <fca>Lag: <fcb>$lag_cap  <228>Idle: $idle_cap<088>  $areacap<088>} {$chat[height]+1}
	}
}

#var clockon 0
#var IdleLimit 900
#TICKER {idle} {
	#math {idle} {$idle + 1};
	#if {$idle > 900 && "$draw[alert]" == "on"} {
		#draw tile $split[top]+1 1 -$split[bottom]-2 $alert[width] {<BF00>}
	}; #elseif {$idle > 840 && "$draw[alert]" == "on"} {
		#draw tile $split[top]+1 1 -$split[bottom]-2 $alert[width] {<BFF0>}
	}; #elseif {$idle > 600 && "$draw[alert]" == "on"} {
		#draw tile $split[top]+1 1 -$split[bottom]-2 $alert[width] {<B0F0>}
	}; #elseif {$idle < 600 && "$draw[alert]" == "on"} {
		#screen clear square $split[top]+1 1 -$split[bottom]-2 $alert[width]
	};
	#if {$bot && $idle > $IdleLimit} {
		.stop;
		#unvar bot;
		#delay {gohome} {go home} {100}
	};
	update_caption
} {1}

#EVENT {RECEIVED INPUT} {
	#var idle 0;
}

#NOP ***** Individual Data Sections *****
#ALIAS {.mipProcessFlag} {
	#SWITCH {"%1"} {
		#CASE {"AAA"} {#NOP Sound};
		#CASE {"AAB"} {#NOP Image};
		#CASE {"AAC"} {#NOP Reboot Time;#VAR {session[reboot]} {%2};update_caption};
		#CASE {"AAD"} {#NOP Music};
		#CASE {"AAF"} {#NOP Uptime;#VAR {session[uptime]} {%2};update_caption};
		#CASE {"AAG"} {#NOP AVI movie};
		#CASE {"AAH"} {#NOP Download Media};
		#CASE {"BAA"} {#NOP Special Textstring;#showme {%2} {2}};
		#CASE {"BAB"} {#NOP 2 Way Communications;.mipProcessBABgag {%2}};
		#CASE {"BAC"} {#NOP Special Textstring2};
		#CASE {"BAD"} {#NOP Room Description};
		#CASE {"BAE"} {#NOP Mud Lag;#VAR {session[lag]} {%2};update_caption};
		#CASE {"BAF"} {#NOP Send Edit};
		#CASE {"BBA"} {#NOP Guild Point1 Mask;#FORMAT {my[gp1][name]} {%s} {%2}};
		#CASE {"BBB"} {#NOP Guild Point2 Mask;#FORMAT {my[gp2][name]} {%s} {%2}};
		#CASE {"BBC"} {#NOP Hit Point Mask;#FORMAT {my[hp][name]} {%s} {%2}};
		#CASE {"BBD"} {#NOP Spell Point Mask;#FORMAT {my[sp][name]} {%s} {%2}};
		#CASE {"CAA"} {#NOP Chat Messages;.mipProcessCAAgag {%2}};
		#CASE {"CAP"} {#NOP Window Caption Text;#FORMAT {temp} {%h} {%2};#showme {$temp} {2}};
		#CASE {"CCF"} {#NOP Send File Line};
		#CASE {"CDF"} {#NOP Send File Begin};
		#CASE {"CEF"} {#NOP Send File End};
		#CASE {"DDD"} {#NOP Room Exits;#NOP Split at Hex 160 (Non Breaking Space)};
		#CASE {"FFF"} {#NOP Combined Stats Data;.mipProcessFFF {%2}};
		#CASE {"HAA"} {#NOP Room Items};
		#CASE {"HAB"} {#NOP Item Actions;.mipProcessHAB {%2}};
		#DEFAULT {#NOP Every other non-handled flag;#showme <148>UNHANDLED MIP: %0<088>}
	}
}

#NOP ***** Combined Stats Data *****
#ALIAS {.mipProcessFFF} {
	#VAR {mip[FFF][flag]} {0};
	#VAR {mip[FFF][toggle]} {0};
	#PARSE {%1} {i} {
		#IF {"$mip[FFF][flag]" == "0"} {
			#VAR {mip[FFF][flag]} {$i};
			#VAR {mip[FFF][$i]} {};
			#VAR {mip[FFF][$i][data]} {};
		} {
			#IF {"$i" == "~"} {
				#IF {"$mip[FFF][toggle]" == "0"} {
					#VAR {mip[FFF][toggle]} {1}
				} {
					.mipProcessFFFSub {$mip[FFF][flag]} {$mip[FFF][${mip[FFF][flag]}][data]};
					#VAR {mip[FFF][flag]} {0};
					#VAR {mip[FFF][toggle]} {0}
				}
			} {
				#VAR {mip[FFF][${mip[FFF][flag]}][data]} {${mip[FFF][${mip[FFF][flag]}][data]}${i}}
			}
		}
	};
	#IF {"$mip[FFF][$mip[FFF][flag]][data]" != ""} {
		.mipProcessFFFSub {$mip[FFF][flag]} {$mip[FFF][${mip[FFF][flag]}][data]}
	}
}

#NOP ***** Separated Stats Data *****
#ALIAS {.mipProcessFFFSub} {
	#SWITCH {"%1"} {
		#CASE {"A"} {#NOP Hit Points;#VAR {my[hp][current]} {%2}};
		#CASE {"B"} {#NOP Hit Points Maximum;#VAR {my[hp][max]} {%2}};
		#CASE {"C"} {#NOP Spell Points;#VAR {my[sp][current]} {%2}};
		#CASE {"D"} {#NOP Spell Points Maximum;#VAR {my[sp][max]} {%2}};
		#CASE {"E"} {#NOP Guild Points1;#VAR {my[gp1][current]} {%2}};
		#CASE {"F"} {#NOP Guild Points1 Maximum;#VAR {my[gp1][max]} {%2}};
		#CASE {"G"} {#NOP Guild Points2;#VAR {my[gp2][current]} {%2}};
		#CASE {"H"} {#NOP Guild Points2 Maximum;#VAR {my[gp2][max]} {%2}};
		#CASE {"I"} {#NOP Primary Guild Line;.mipProcessGline {1} {%2}};
		#CASE {"J"} {#NOP Secondary Guild Line;.mipProcessGline {2} {%2}};
		#CASE {"K"} {#NOP Mob Fighting;.mipProcessFFFK {%2}};
		#CASE {"L"} {#NOP Mob Health;#VAR {enemy[hp]} {%2}};
		#CASE {"M"} {#NOP Mob Image File};
		#CASE {"N"} {#NOP Combat Round Counter;#VAR {mip[round]} {%2}};
		#DEFAULT {#NOP Every other non-handled flag}
	};
	#NOP update_status alias defined in personal hpbar trigger;
	update_status
}

#NOP ***** Combat Mob Name *****;
#ALIAS {.mipProcessFFFK} {
	#IF {"%1" != ""} {
		#VAR {enemy} {};
		#VAR {enemy[name]} {%1};
		#NOP Lowercase version of enemy name;
		#format {enemy[lc]} {%l} {$enemy[name]}
	} {
		#VAR {enemy[hp]} {}
	}
}

#NOP ***** Guild Stats Line 1/2 *****
#ALIAS {.mipProcessGline} {
	#VAR {mip[gline][%1]} {@fMipColorConv{%2}};
	#VAR {temp} {};

	#NOP GUILD SPECIFIC GLINE PROCESSING;
	#IF {"%2" != ""} {
		#SWITCH {"$guild"} {
			#CASE {"adventurer"}	{.mipProcessGlineAdenturer {%1}};
			#CASE {"android"}	{.mipProcessGlineAndroid {%1}};
			#CASE {"angel"}		{.mipProcessGlineAngel {%1}};
			#CASE {"ascended"}	{.mipProcessGlineAscended {%1}};
			#CASE {"bard"}		{.mipProcessGlineBard {%1}};
			#CASE {"bladesinger"}	{.mipProcessGlineBladesinger {%1}};
			#CASE {"breed"}		{.mipProcessGlineBreed {%1}};
			#CASE {"changeling"}	{.mipProcessGlineChangeling {%1}};
			#CASE {"cleric"}	{.mipProcessGlineCleric {%1}};
			#CASE {"cyborg"}	{.mipProcessGlineCyborg {%1}};
			#CASE {"elemental"}	{.mipProcessGlineElemental {%1}};
			#CASE {"fighter"}	{.mipProcessGlineFighter {%1}};
			#CASE {"fremen"}	{.mipProcessGlineFremen {%1}};
			#CASE {"gentech"}	{.mipProcessGlineGentech {%1}};
			#CASE {"jedi"}		{.mipProcessGlineJedi {%1}};
			#CASE {"juggernaut"}	{.mipProcessGlineJuggernaut {%1}};
			#CASE {"knight"}	{.mipProcessGlineKnight {%1}};
			#CASE {"mage"}		{.mipProcessGlineMage {%1}};
			#CASE {"monk"}		{.mipProcessGlineMonk {%1}};
			#CASE {"necromancer"}	{.mipProcessGlineNecromancer {%1}};
			#CASE {"priest"}	{.mipProcessGlinePriest {%1}};
			#CASE {"psicorp"}	{.mipProcessGlinePsicorp {%1}};
			#CASE {"sii"}		{.mipProcessGlineSii {%1}};
			#CASE {"sorcerer"}	{.mipProcessGlineSorcerer {%1}}
		}
	}
}

#ALIAS {.mipProcessGlineAdventurer} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineAndroid} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}


#ALIAS {.mipProcessGlineAngel} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineAscended} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineBard} {
        #IF {%1 == 1} {
		#NOP
        }; #ELSEIF {%1 == 2} {
		#NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineBladesinger} {
        #IF {%1 == 1} {
		#NOP
        }; #ELSEIF {%1 == 2} {
		#NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineBreed} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineChangeling} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Chaos Flux: %d/%d} {
			#VAR {my[relinquish][current]}	{&1};
			#VAR {my[relinquish][reset]}	{&2}
		};
		#REGEX {$mip[gline][1]} {{Density|Homeostasis|Mitosis|Morphogenesis|Resilience}: %d.%d\%} {
			#VAR {my[skill][name]}		{&1};
			#VAR {my[skill][current]}	{&2.&3}
		};
		#REGEX {$mip[gline][1]}	{\[{FF|IL}\(%d\): %d.%d\%\]<099>  \[%D\]} {
			#VAR {my[ff][current]}		{&3.&4};
			#VAR {my[form]}			{&5}
		}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{\[Bioplasts: %d\]} {#VAR {my[bioplasts]}	{&1}}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineCleric} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineCyborg} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineElemental} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Emit<099> : <%d>%d}	{#VAR {my[emit][level]}		{&2}};
		#REGEX {$mip[gline][1]} {Equipollent}		{#VAR {my[equip]}		{on}}
								{#VAR {my[equip]}		{off}};
		#REGEX {$mip[gline][1]} {Form<099>: <869>%w<099>\(<819>%d<099>\)}		{
			#VAR {my[form][type]}		{&1};
			#VAR {my[form][size]}		{&2}
		};
		#REGEX {$mip[gline][1]} {Rating<099>: <819>%d<099>}			{#VAR {my[rating]}		{&1}}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {Stones/Waves/Shrouds<099>: <%d>%d<099>/<%d>%d<099>/<%d>%d<099>\(%d\%\)} {
			#VAR {my[blasts]}		{&2};
			#VAR {my[waves]}		{&4};
			#VAR {my[shrouds]}		{&6};
			#VAR {my[reset]}		{&7}
		};
		#REGEX {$mip[gline][2]} {G2N: <%d>%d<099>}		{#VAR {my[g2n]}			{&2}}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineFighter} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineFremen} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineGentech} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {CPC:<%d>%d<099>/%d G2N:%d(%d\%) RC[%d] Reset(<%d>%d\%<099>) TS:%d/%d E-TS:%d} {
			#VAR {gentech[cpc][current]}	{&2};
			#VAR {gentech[cpc][max]}	{&3};
			#VAR {gentech[gxp][tnl]}	{&4};
			#VAR {gentech[gxp][per]}	{&5};
			#NOP #VAR {gentech[rc][num]}		{&6};
			#VAR {gentech[reset]}		{&8};
			#VAR {gentech[ts][current]}	{&9};
			#VAR {gentech[ts][max]}		{&10};
			#VAR {gentech[ets]}		{&11}
		};
		#REPLACE {mip[gline][1]} {Reset} {R}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {Bias[<%d>%w<099>] Atk(<%d>%d\%<099>) Def(<%d>%d\%<099>) <178>Efield<099>(<178>%d%w<099>) Edna(<178>%d%w<099>) Illum(<%d>%w<099>)} {
			#VAR {gentech[bias][mode]}	{&2};
			#VAR {gentech[bias][atk]}	{&4};
			#VAR {gentech[bias][def]}	{&6};
			#VAR {gentech[efield][num]}	{&7};
			#VAR {gentech[efield][unit]}	{&8};
			#VAR {gentech[edna][num]}	{&9};
			#VAR {gentech[edna][unit]}	{&10};
			#VAR {gentech[illum]}		{&11};
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineJedi} {
	#IF {%1 == 1} {
		#REGEX {GXP:%s{[\d\.]+}\%}		{#VAR {my[gxp][current]}	{&2}};
	}; #ELSEIF {%1 == 2} {
		#NOP
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineJuggernaut} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {{Ammo:\[(\d+)?/?(\d+)?/?(\d+)?/?(\d+)?/?(\d+)?\]} <838>Gxp: %d.%d\%<099> Hits: \[%d\] <868>Coffin: %d/%d} {
			#VAR {ammo[1]}			{&2};
			#VAR {ammo[2]}			{&3};
			#VAR {ammo[3]}			{&4};
			#VAR {ammo[4]}			{&5};
			#VAR {ammo[5]}			{&6};
			#VAR {gxp}			{&7.&8};
			#VAR {hits}			{&9};
			#VAR {corpses[coffin]}		{&10};
			#VAR {corpses[coffinsize]}	{&11}
		}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {Nukes: [%d/%d]<099> Reset: [%d\%]} {
			#VAR {nukes}		{&1};
			#VAR {nukes_max}	{&2};
			#VAR {reset}		{&3}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineKnight} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Stance: %w | Method: %w | Sec Wind: %d.%d\% | Guild Level: %d | Class: %w | Morale: %d} {
			#VAR {knight[stance]}		{&1};
			#VAR {knight[method]}		{&2};
			#VAR {knight[sw][num]}		{&3.&4};
			#VAR {knight[gl]}		{&5};
			#VAR {knight[class]}		{&6};
			#VAR {knight[morale][num]}	{&7}
		};
		#REPLACE {knight[stance]} {defensive}	{<148>D<088>};
		#REPLACE {knight[stance]} {neutral}	{<138>N<088>};
		#REPLACE {knight[stance]} {offensive}	{<118>O<088>};
		#REPLACE {knight[method]} {melee}	{<118>M<088>};
		#REPLACE {knight[method]} {focus}	{<168>F<088>};
		#REPLACE {knight[method]} {charge}	{<128>C<088>};
		#REPLACE {knight[method]} {standard}	{<138>S<088>};
		#VAR	 {knight[sw][col]}		{@colscale{$knight[sw][num];100}};
		#VAR	 {knight[morale][col]}		{@colscale{$knight[morale][num];5}};
		#REPLACE {mip[gline][1]} { | }				{ };
		#REPLACE {mip[gline][1]} {Stance: %w Method: %w}	{S/M:$knight[stance]/$knight[method]};
		#REPLACE {mip[gline][1]} {Sec Wind: %d.%d}		{SW:$knight[sw][col]};
		#REPLACE {mip[gline][1]} {Guild Level}			{GL};
		#REPLACE {mip[gline][1]} {Class: %w }			{};
		#REPLACE {mip[gline][1]} {Morale: %d}			{M:$knight[morale][col]};
		#REPLACE {mip[gline][1]} {: }				{:}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {[GXN:%d] [HMN:%d.%d\%] [FSN:%d.%d\%] [OFN:%d.%d\%] [DFN:%d.%d\%] [LF:%d] [MOB:%w]} {
			#VAR {knight[gxn]}	{&1};
			#VAR {knight[hmn][num]}	{&2.&3};
			#VAR {knight[fsn][num]}	{&4.&5};
			#VAR {knight[ofn][num]}	{&6.&7};
			#VAR {knight[dfn][num]}	{&8.&9};
			#VAR {knight[lf]}	{&10};
			#VAR {knight[mob]}	{&11}
		};
		#VAR	 {knight[hmn][col]}	{@colscale{$knight[hmn][num];100}};
		#VAR	 {knight[fsn][col]}	{@colscale{$knight[fsn][num];100}};
		#VAR	 {knight[ofn][col]}	{@colscale{$knight[ofn][num];100}};
		#VAR	 {knight[dfn][col]}	{@colscale{$knight[dfn][num];100}};
		#REPLACE {mip[gline][2]} {HMN:%d.%d}		{HMN:$knight[hmn][col]};
		#REPLACE {mip[gline][2]} {FSN:%d.%d}		{FSN:$knight[fsn][col]};
		#REPLACE {mip[gline][2]} {OFN:%d.%d}		{OFN:$knight[ofn][col]};
		#REPLACE {mip[gline][2]} {DFN:%d.%d}		{DFN:$knight[dfn][col]};
		#REPLACE {mip[gline][2]} {[}	{};
		#REPLACE {mip[gline][2]} {]}	{};
		#REPLACE {mip[gline][2]} {MOB}	{E}
	}
}

#ALIAS {.mipProcessGlineMage} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineMonk} {
        #IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {<868>Method<099>: <838>%w<099>{?:\s+}<868>Crits<099>: <{?:\d+}>%w<099>{?:\s+}<868>Stun<099>: <{?:\d+}>%w<099>{?:\s+}<868>Hide<099>: <{?:\d+}>%w<099>} {
			#var	{monk[method]}		{&1};
			#var	{monk[crits]}		{&2};
			#var	{monk[stun]}		{&3};
			#var	{monk[hide]}		{&4}
		};
		#REPLACE {mip[gline][1]} {    } {  }
        }; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {G2N: <838>%d<099>{?:\s+}<868>Chi Focus<099>: <{?:\d+}>%w<099>{?:\s+}<838>AE<099>: <{\d+}>%d<099>/%d%%} {
			#var	{monk[g2n][prev]}	{$monk[g2n][current]};
			#var	{monk[g2n][current]}	{&1};
			#var	{monk[chifocus]}	{&2};
			#var	{monk[ae][current]}	{&3};
			#var	{monk[ae][reset]}	{&4};
			#math	{monk[gxp][last]}	{$monk[g2n][prev] - $monk[g2n][current]};
			#format {monk[gxp][last_col]}	{%+3s} {$monk[gxp][last]};
			#if {$monk[gxp][last] > 0} {
				#math {monk[g2n][rounds]} {$monk[g2n][current] / $monk[gxp][last]}
			};
			#math {monk[gxp][day]}	{$monk[g2n][rounds] / 43200};
			#math {monk[gxp][hour]}	{$monk[g2n][rounds] % 43200 / 1800};
			#math {monk[gxp][min]}	{$monk[g2n][rounds] % 1800 / 30};
			#math {monk[gxp][sec]}	{$monk[g2n][rounds] % 30 * 2};
			#if {$monk[gxp][day] > 0} {
				#var {monk[gxp][time]} {<120>${monk[gxp][day]}<020>d <120>${monk[gxp][hour]}<020>h<099>}
			}; #elseif {$monk[gxp][hour] > 0} {
				#var {monk[gxp][time]} {<120>${monk[gxp][hour]}<020>h <120>${monk[gxp][min]}<020>m<099>}
			}; #elseif {$monk[gxp][min] > 0} {
				#var {monk[gxp][time]} {<120>${monk[gxp][min]}<020>m <120>${monk[gxp][sec]}<020>s<099>}
			}; #else {
				#var {monk[gxp][time]} {<120>${monk[gxp][sec]}<020>s<099>}
			}
		};
		#REPLACE {mip[gline][2]} {G2N: <838>%d<099>} {G2N: <838>&1<099>[<138>${monk[gxp][last_col]}<099>][${monk[gxp][time]}]};
		#REPLACE {mip[gline][2]} {    } {  }
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlineNecromancer} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {C:%d}		{#VAR {corpses[inventory]}	{&1}};
		#REGEX {$mip[gline][1]} {Worth:%d}	{#VAR {my[worth]}		{&1}};
		#REGEX {$mip[gline][1]} {Tport:%d/%d}	{
			#VAR {my[ports][current]}	{&1};
			#VAR {my[ports][max]}		{&2}
		};
		#REGEX {$mip[gline][1]} {Sprk:%d/%d}	{
			#VAR {my[sparks][current]}	{&1};
			#VAR {my[sparks][max]}		{&2}
		};
		#REGEX {$mip[gline][1]} {Prot:%wX}	{#VAR {my[prot]}		{&1}};
		#REGEX {$mip[gline][1]} {Circle:%d}	{#VAR {my[gxp]}			{&1}}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{Undead:%w}	{#VAR {my[undead]}		{&1}};
		#REGEX {$mip[gline][2]}	{SPf:%d/%d}	{
			#VAR {my[sp][fuse][current]}	{&1};
			#VAR {my[sp][fuse][max]}	{&2}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlinePriest} {
        #IF {%1 == 1} {
		#NOP
        }; #ELSEIF {%1 == 2} {
		#NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}

#ALIAS {.mipProcessGlinePsicorp} {
	#IF {%1 == 1} {
		#NOP
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {G2N: %* / %d\%} {
			#FORMAT {my[gxp][tnl]} {%d} {&1};
			#VAR {my[gxp][per]} {&2}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineSii} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]}	{Regen: %w}	{#VAR {my[regen]}		{&1}}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{Con:%d/%d}	{
			#VAR {my[control][current]}	{&1};
			#VAR {my[control][max]}		{&2}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineSorcerer} {
        #IF {%1 == 1} {
                #NOP
        }; #ELSEIF {%1 == 2} {
                #NOP
        }; #ELSE {
                #ECHO {<171> Invalid Gline Number <088>}
        }
}


#NOP ***** 2 Way Communication (Tell/Emote) *****
#ALIAS {.mipProcessBABgag} {
	#var mipgag 0;

	#NOP Duplicate 'from' soul;
	#REGEX {%0} {~you~} {#var mipgag 1};


	#NOP Add cases for tells/emotes to gag from monitor, such as mob emotes;

	#NOP Player specific gags;
	#NOP Byron crying OW;
	#REGEX {%0} {~Byron~cries 'OW!!'} {#var mipgag 1};
	#REGEX {%0} {~%w~pokes %w in the ribs} {#var mipgag 1};

	#NOP Guilds and Areass;
	#NOP Bards;
	#REGEX {%0} {~cracks %w knuckles and gets ready to play for } {#var mipgag 1};
	#REGEX {%0} {~ceases his performance.} {#var mipgag 1};
	#REGEX {%0} {~takes a deep breath.} {#var mipgag 1};
	#REGEX {%0} {~takes a breath.} {#var mipgag 1};
	#REGEX {%0} {~pauses for a moment...} {#var mipgag 1};
	#REGEX {%0} {~ceases his performance.} {#var mipgag 1};
	#REGEX {%0} {~%w~finishes %w performance with a bow.} {#var mipgag 1};
	#REGEX {%0} {~%w~takes a deep breath and prepares to perform a song for you.} {#var mipgag 1};
	#REGEX {%0} {~Great~cheer fills you, it's almost overwhelming!} {#var mipgag 1};
	#REGEX {%0} {~%w~smiles happily.} {#var mipgag 1};
	#REGEX {%0} {~%w~takes a deep breath and prepares to perform a song for %w.} {#var mipgag 1};
	#REGEX {%0} {~%w~sings soulfully} {#var mipgag 1};

	#NOP Changelings;
	#REGEX {%0} {~The~%*'s wounds close rapidly.} {#var mipgag 1};
	#REGEX {%0} {~The~%* performs a rather incomprehensible action on the corpse.} {#var mipgag 1};
	#REGEX {%0} {~The~small wolf sighs.} {#var mipgag 1};

	#NOP Cove of the Three (Lost Soul);
	#REGEX {%0} {~~You try to clasp onto the diamond spectacle, but your hands fall right through!} {#var mipgag 1};
	#REGEX {%0} {~~Bursts of %w colored energy shoot off from the spectacle.} {#var mipgag 1};
	#REGEX {%0} {~~The diamond-spectacle spins and turns on an unseen axis.} {#var mipgag 1};
	#REGEX {%0} {~~The diamond-shaped spectacle changes color.} {#var mipgag 1};

	#NOP Carina's Observatory;
	#REGEX {%0} {~~Carina looks up at you as if to say something, but shrugs it off.} {#var mipgag 1};

	#NOP Duke Nukem;
	#REGEX {%0} {~~As you land upon the rooftop, you see your ship crash into a building in the} {#var mipgag 1};
	#REGEX {%0} {~~You break the fan, revealing an exit!} {#var mipgag 1};
	#REGEX {%0} {~~You see the assault trooper and taunt him, WHO'S YOUR DADDY!!??} {#var mipgag 1};
	#REGEX {%0} {~~The room shakes.......And a piece of the wall is blown away!} {#var mipgag 1};

	#NOP Dundee;
	#REGEX {%0} {~A~shiver runs through you as you successfully fight off an infection.} {#var mipgag 1};
	#REGEX {%0} {~Your~head throbs briefly as you successfully fight off an infection.} {#var mipgag 1};
	#REGEX {%0} {~Your~temperature spikes as you successfully fight off an infection.} {#var mipgag 1};
	#REGEX {%0} {~Your~palms begin to sweat as you successfully fight off an infection.} {#var mipgag 1};
	#REGEX {%0} {~Your~neck aches slightly as you successfully fight off an infection.} {#var mipgag 1};

	#NOP Hell Cows;
	#REGEX {%0} {~A~cow falls, but the herd continues on!} {#var mipgag 1};
	#REGEX {%0} {~The~lonesome cow topples to the ground, the herd finally slain.} {#var mipgag 1};

	#NOP Knights;
	#REGEX {%0} {~Bela~} {#var mipgag 1};

	#NOP Necromancer;
	#REGEX {%0} {~The~spirit of the beast leaves your body, slightly weakening you.} {#var mipgag 1};
	#REGEX {%0} {~%w~appears slightly drained.} {#var mipgag 1};

	#NOP Party Divvy;
	#REGEX {%0} {[PARTY] GOLD divvy called by } {#var mipgag 1};
	#REGEX {%0} {[PARTY] All gold divvied, total: } {#var mipgag 1};

	#NOP Sii;
	#REGEX {%0} {~Your~malicious attacks fade} {#var mipgag 1};
	#REGEX {%0} {~The~corpse explodes as a small vicious lizard-like creature bursts forth!} {#var mipgag 1};

	#NOP Tomb of King Alaren;
	#REGEX {%0} {~With~a mighty heave you shoulder charge into the eastern wall.} {#var mipgag 1};
	#REGEX {%0} {~~With a slow rumble the wall finally crumbles, filling the room in a cloud of} {#var mipgag 1};
	#REGEX {%0} {~His~service to his King complete, the guard clatters to the floor, the dark magic} {#var mipgag 1};
	#REGEX {%0} {~The~skeletal royal guard steps in front of you barring your progress.} {#var mipgag 1};
	#REGEX {%0} {~Harakir~slumps to the floor, defeated, perhaps now his soul will find} {#var mipgag 1};
	#REGEX {%0} {~With~a few swings of your } {#var mipgag 1};
	#REGEX {%0} {~With~a mighty heave you push the [stone|golden] lid sliding it back from the coffin} {#var mipgag 1};
	#REGEX {%0} {~Turning~to leave you hear Mircarla's sultry voice calling you back} {#var mipgag 1};
	#REGEX {%0} {~Caught~unaware by her turn of pace as you attack, you} {#var mipgag 1};
	#REGEX {%0} {~Before~your very eyes you stare in amazement as Mircarla} {#var mipgag 1};
	#REGEX {%0} {~Her~meal completed, she clambers off you licking her now ruby red lips} {#var mipgag 1};
	#REGEX {%0} {~Mircarla~sighs, the last of her energy expended as she slumps to the floor} {#var mipgag 1};
	#REGEX {%0} {~Sumaren~crumples to the ground, destroyed, perhaps at last his soul will find} {#var mipgag 1};
	#REGEX {%0} {~Someone~has already pushed the lid open, there's no need to push it again.} {#var mipgag 1};
	#REGEX {%0} {~Straining~with all your might you give the ring a mighty heave, at first} {#var mipgag 1};
	#REGEX {%0} {~Reaching~out, you give the gates a firm push. With an echoing screech the} {#var mipgag 1};
	#REGEX {%0} {~Alaren~begins to slowly lose cohesion, glowing ever brighter until, suddenly} {#var mipgag 1};
	#REGEX {%0} {~The~skeletal guard steps in front of you barring your progress.} {#var mipgag 1};

	#NOP Wrapping with no corpse in room;
	#REGEX {%0} {~%w~wraps %w arms around %w.} {#var mipgag 1};

	#NOP Zelligar's Headband;
	#REGEX {%0} { stumbles in confusion as the headband hypnotizes } {#var mipgag 1};

	#IF {$mipgag == 0} {.mipProcessBAB %0}
}

#var chat[max] 100
#var chat[offset] 0
#var chat[page] 1
#var chat[rows] 17
#var chat[scroll] page

/*
#ALIAS {show_chat} {
	#math chat[start]	{$chat[rows] * $chat[page]};
	#math chat[end]		{$chat[rows] * $chat[page] - $chat[rows] + 1};
	#if {"$draw[chat]" == "on"} {
		#line sub var #line sub esc #draw {tile} 1 1 $chat[rows] $chat[right] $chat[log][-$chat[start]..-$chat[end]]
	}
}
*/

#ALIAS {show_chat} {
	#math chat[start]	{$chat[rows] + $chat[offset]};
	#math chat[end]		{$chat[offset] + 1};
	#if {"$draw[chat]" == "on"} {
		#line sub var #line sub esc #draw {tile} 1 1 $chat[rows] $chat[right] $chat[log][-$chat[start]..-$chat[end]]
	}
}
#ALIAS {update_chat} {
	#format {timestamp} {%t} {<108>[<268>%H<108>:<268>%M<108>]<088> };
	#if {&chat[log][] > $chat[max]} {
		#list chat[log] del 1
	};
	#NOP remove esc chars;
	#var chat[text] %0;
	#replace {chat[text]} {\\x7B} {\uFF5B};
	#replace {chat[text]} {\\x7D} {\uFF5D};
	#list chat[log] ins -1 {${timestamp}$chat[text]};

	#class {chat} {write} {.tt/3k/vars/${mud}chat.var};
	show_chat
}
#ALIAS {chatup} {
	#if {"$chat[scroll]" == "page"} {
		#if {$chat[rows]*{$chat[page]+1} <= $chat[max] &&
		     $chat[rows]*{$chat[page]+1} <= &chat[log][]} {
			#math chat[page] {$chat[page] + 1};
			#math chat[offset] {$chat[page] * $chat[rows] - $chat[rows]};
			show_chat
		}
	}; #elseif {"$chat[scroll]" == "line"} {
		#if {$chat[offset] <= $chat[max] &&
		     $chat[offset] <= &chat[log][]} {
			#math chat[offset] {$chat[offset] + 1};
			show_chat
		}
	}
}
#ALIAS {chatdown} {
	#if {"$chat[scroll]" == "page"} {
		#if {$chat[page] > 1} {
			#math chat[page] {$chat[page] - 1};
			#math chat[offset] {$chat[page] * $chat[rows] - $chat[rows]};
			show_chat
		}
	}; #elseif {"$chat[scroll]" == "line"} {
		#if {$chat[offset] > 0} {
			#math chat[offset] {$chat[offset] - 1};
			show_chat
		}
	}
}
#ALIAS {chatend} {
	#var chat[page] 1;
	#var chat[offset] 0;
	show_chat
}

#ALIAS {.mipProcessBAB} {
	#REGEX {%1} {{(.*)\~(.*)\~(.*)}} {
		#IF {"&3" != "0"} {
			#var mip[comm][data]	{&4};
			#var mip[comm][source]	{&3};
			#var mip[comm][line]	{Tell};
			#var mip[comm][command]	{tell $mip[comm][source]};

			#NOP Revert ^^ back to ~;
			#REPLACE {mip[comm][data]} {\^\^} {~};

			#IF {"&2" == "x"} {
				#NOP Message to another player;
				#var mip[comm][twoway] {to};
				#line log {.tt/logs/3k.chat} {$timestamp\};
				#line log {.tt/logs/3k.chat} {<178>To &3<088>: &4};
				update_chat <178>To $mip[comm][source]<088>: $mip[comm][data]
			} {
				#NOP Message from another player;
				#var mip[comm][twoway] {from};
				#line log {.tt/logs/3k.chat} {$timestamp\};
				#line log {.tt/logs/3k.chat} {<178>&3<088>: &4};
				update_chat <178>$mip[comm][source]<088>: $mip[comm][data];
				#bell;

				#NOP Chat Tools;
				#if  {$idle <= 900} {
					#NOP 8Inix;
					#if {"$v8inix" == "on"} {
						#regex {$mip[comm][data]} {%i8inix} {
							do8inix
						}
					};

					#NOP IDefine;
					#if {"$idefine" == "on"} {
						#regex {$mip[comm][data]} {%iidefine} {
							dodefine
						}
					};

					#NOP UDefine;
					#if {"$udefine" == "on"} {
						#regex {$mip[comm][data]} {%iudefine} {
							doudefine
						}
					};

					#NOP Google Wiki Search;
					#if {"$google" == "on"} {
						#regex {$mip[comm][data]} {%iigoogle} {
							dogoogle
						}
					};

					#NOP ADDS;
					#if {"$adds" == "on"} {
						#regex {$mip[comm][data]} {%iiwx} {
							doadds
						}
					};

					#NOP Stocks;
					#if {"$stocks" == "on"} {
						#regex {$mip[comm][data]} {%iistocks} {
							dostocks
						} {
							#regex {$mip[comm][data]} {%iistock} {
								dostock
							}
						}
					};

					#NOP Crypto;
					#if {"$crypto" == "on"} {
						#regex {$mip[comm][data]} {%i: icrypto} {
							docrypto
						}
					}
				}
			}
		}
	}
}

#NOP ***** Broadcast Communication (Chat/Shout) *****
#ALIAS {.mipProcessCAAgag} {
	#var mipgag 0;

	#NOP Party Divvy gag;
        #REGEX {%0} {[PARTY] GOLD divvy called by } {#var mipgag 1};
        #REGEX {%0} {[PARTY] All gold divvied, total: } {#var mipgag 1};

	#NOP Gentech Notify Line;
	#NOP #REGEX {%0} {gnotify~Notify~%w~[Gen-Nofity]: } {#var mipgag 1};

	#IF {$mipgag == 0} {.mipProcessCAA %0}
}
#ALIAS {.mipProcessCAA} {
	#REGEX {%1} {{(.*)\~(.*)\~(.*)\~(.*)}} {
		#var {mip[comm][command]}	{&2};
		#var {mip[comm][line]}		{&3};
		#var {mip[comm][source]}	{&4};
		#var {mip[comm][data]}		{&5};
		#format {timestamp} {%t} {<108>[<268>%H<108>:<268>%M<108>]<088> };

		#NOP Revert ^^ back to ~;
		#REPLACE {mip[comm][data]} {\^\^} {~};

		#NOP Ansify lines;
		#var {commcol} {<178>};
		#switch {"$mip[comm][line]"} {
			#case {"ADMIN"}			{#var {commcol} {<158>}};
			#case {"Alpha"}			{#var {commcol} {<168>}};
			#case {"Announce"}		{#var {commcol} {<168>}};
			#case {"Auction"}		{#var {commcol} {<108>}};
			#case {"Bear"}			{#var {commcol} {<168>}};
			#case {"Bloodname"}		{#var {commcol} {<218>}};
			#case {"Breed"}			{#var {commcol} {<158>}};
			#case {"BreedOOC"}		{#var {commcol} {<258>}};
			#case {"Clan Cad"}		{#var {commcol} {<158>}};
			#case {"Com"}			{#var {commcol} {<128>}};
			#case {"Council"}		{#var {commcol} {<108>}};
			#case {"Cyborg Com"}		{#var {commcol} {<138>}};
			#case {"Cyborg Death"}		{#var {commcol} {<218>}};
			#case {"Cyborg Guild"}		{#var {commcol} {<228>}};
			#case {"Cyborg Notify"}		{#var {commcol} {<268>}};
			#case {"Cyborg Syndicate"}	{#var {commcol} {<128>}};
			#case {"Eternal Main"}		{#var {commcol} {<168>}};
			#case {"Events"}		{#var {commcol} {<168>}};
			#case {"Explorer"}		{#var {commcol} {<178>}};
			#case {"Falcon"}		{#var {commcol} {<128>}};
			#case {"Gamers"}		{#var {commcol} {<268>}};
			#case {"Gjugg"}			{#var {commcol} {<118>}};
			#case {"High Mortal"}		{#var {commcol} {<108>}};
			#case {"Jedi"}			{#var {commcol} {<158>}};
			#case {"JEDI"}			{#var {commcol} {<128>}};
			#case {"JuggAnnounce"}		{#var {commcol} {<118>}};
			#case {"JuggMissiles"}		{#var {commcol} {<118>}};
			#case {"JuggNewbie"}		{#var {commcol} {<258>}};
			#case {"Knight Announce"}	{#var {commcol} {<168>}};
			#case {"Knight Main"}		{#var {commcol} {<168>}};
			#case {"Lich"}			{#var {commcol} {<158>}};
			#case {"Loremaster"}		{#var {commcol} {<274>}};
			#case {"Lottery"}		{#var {commcol} {<178>}};
			#case {"Main"}			{#var {commcol} {<118>}};
			#case {"Monk"}			{#var {commcol} {<238>}};
			#case {"Newbie"}		{#var {commcol} {<138>}};
			#case {"Notify"}		{#var {commcol} {<168>}};
			#case {"Party"}			{#var {commcol} {<128>}};
			#case {"Poll"}			{#var {commcol} {<178>}};
			#case {"Professions"}		{#var {commcol} {<178>}};
			#case {"Psi Main"}		{#var {commcol} {<168>}};
			#case {"Shout"}			{#var {commcol} {<178>}};
			#case {"Whine"}			{#var {commcol} {<118>}};
			#case {"Wolf"}			{#var {commcol} {<228>}};
			#case {"Zilch_shout"}		{#var {commcol} {<168>}};
			#default			{#var {commcol} {<178>}}
		};
		

		#var {mip[comm][cdata]} {$mip[comm][data]};
		#replace {mip[comm][cdata]} {: } {:<099> };
		#var {mip[comm][cdata]} {$commcol$mip[comm][cdata]<099>};

		#line log {.tt/logs/3k.chat} {$timestamp\};
		#line log {.tt/logs/3k.chat} {$mip[comm][cdata]};
		update_chat $mip[comm][cdata];

		#if {$idle <= 900} {
			#NOP 8Inix;
			#if {"$v8inix" == "on"} {
				#regex {$mip[comm][data]} {%i: 8inix} {
					do8inix
				}
			};

			#NOP IDefine;
			#if {"$idefine" == "on"} {
				#regex {$mip[comm][data]} {%i: idefine} {
					dodefine
				}
			};

			#NOP UDefine;
			#if {"$udefine" == "on"} {
				#regex {$mip[comm][data]} {%i: udefine} {
					doudefine
				}
			};

			#NOP Google Wiki Search;
			#if {"$google" == "on"} {
				#regex {$mip[comm][data]} {%iigoogle} {
					dogoogle
				}
			};

			#NOP ADDS;
			#if {"$adds" == "on"} {
				#regex {$mip[comm][data]} {%i: iwx} {
					doadds
				}
			};

			#NOP Stocks;
			#if {"$stocks" == "on"} {
				#regex {$mip[comm][data]} {%i: istocks} {
					dostocks
				} {
					#regex {$mip[comm][data]} {%i: istock} {
						dostock
					}
				}
			};

			#NOP Crypto;
			#if {"$crypto" == "on"} {
				#regex {$mip[comm][data]} {%i: icrypto} {
					docrypto
				}
			}
		}
	}
}

#NOP ***** Room Nouns Handling *****
#ALIAS {.mipProcessHAB} {
	#REGEX {%1} {{(.*)\~(.*)\~(.*)\~(.*)}} {
		#list {nouns} {fin} {&3} {noun_index};
		#if {$noun_index == 0} {
			#list {nouns} {add} {&3};
			#if {"$autosearch" == "on"} {
				exa &3;
				search &3
			}
		}
	}
}
#list {nouns} {create}

#NOP ***** Guild Stats Line Color Handling *****
#FUNCTION {fMipColorConv} {
	#VAR {result} {%1};
	#REPLACE {result} {>} {<099>};
	#REPLACE {result} {<b} {<848>};
	#REPLACE {result} {<c} {<868>};
	#REPLACE {result} {<g} {<828>};
	#REPLACE {result} {<r} {<818>};
	#REPLACE {result} {<s} {<278>};
	#REPLACE {result} {<v} {<858>};
	#REPLACE {result} {<w} {<178>};
	#REPLACE {result} {<y} {<838>}
}

#CLASS {mip} {close}

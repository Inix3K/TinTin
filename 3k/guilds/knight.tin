#class {knight} {open}

#var guild knight
#var gxn_last 0

/* Knight hpconfig setting */
#NOP hpconfig HP:#CHP#/#MHP# SP:#CSP#/#MSP# STM:#CST#/#MST# STN:#STN#% (#STL#) SW:#SEC#% | #SSN# #MTH##NLN#PPD(#PRE#) End(#END#) Cry(#CRY#) Dfl(#DFL#) Study(#STD#) Dodge(#DDG#) Brawl(#BRL#) Shield(#SHB#) Parry(#PRY#)#NLN#GXP: #GXP#(#G2N#) Joust:#JST# Last:#LFR# E:#MOB#

#act {{HP:(\d+)/(\d+) SP:(\d+)/(\d+) STM:(\d+)/(\d+) STN:(\d+)\% \((\d+)\) SW:([\d\.]+)\% \| (\w+) (\w+)}} {
	#var {my[hp][current]}	{%2};
	#var {my[hp][max]}	{%3};
	#var {my[sp][current]}	{%4};
	#var {my[sp][max]}	{%5};
	#var {my[gp1][current]}	{%6};
	#var {my[gp1][max]}	{%7};
	#var {my[gp2][current]}	{%8};
	#var {stn_lvl}		{%9};
	#var {sw}		{%10};
	#var {stance}		{%11};
	#var {method}		{%12};
	#var knight[staunch]	{0};
}

#act {PPD(%w) End(%w) Cry(%p) Dfl(%w) Study(%w) Dodge(%w) Brawl(%w) Shield(%w) Parry(%w)} {
	#var {kskills[prepare]}		{%1};
	#var {kskills[endurance]}	{%2};
	#var {kskills[battlecry]}	{%3};
	#var {kskills[deflect]}		{%4};
	#var {kskills[study]}		{%5};
	#var {kskills[dodge]}		{%6};
	#var {kskills[brawl]}		{%7};
	#var {kskills[shieldblock]}	{%8};
	#var {kskills[parry]}		{%9};
	#if {"$kskills[prepare]" != "Y"} {#send !prepare on}
}

#act {GXP: %d(%p) Joust:%p Last:%d E:%p} {
	#math {gxn_last} {%1 - $gxp};
	#var {gxp}	{%1};
	#var {gxn}	{%2};
	#var {joust}	{%3};
	#var {ehealth}	{%4};
	update_status
}

#alias {update_status} {
	#if {"$method" == "Standard"} {#send !method melee};
	#if {$my[hp][current] < $my[hp][max]*.9 &&
	     $knight[staunch] < 3} {
		#send !staunch;
		#math {knight[staunch]} {$knight[staunch] + 1}
	};
	#if {$my[sp][current] > $my[sp][max]*.9} {
		#if {$my[gp1][current] < 90 || $my[gp2][current] > 10} {
			#NOP #delay {willdelay} {#send !will} {0.05}
		}
	};
	#if {$my[gp2][current] > 50} {
		#if {$corpses[cooler] > 0} {
			#send !uncooler corpse;
			#send !bury corpse
		};
		#elseif {$corpses[coffin] > 1} {
			#send !unwrap;
			#send !bury corpse
		}
	};
	#if {$sw > 99.9} {
		#if {$my[gp1][current] < 10 || $my[gp2][current] > 90} {
			#send !secondwind
		}
	};
	#if {"$cooler" == "on" || $corpses[cooler] > 0} {
		#format {sb1_cooler} {%+2s} {$corpses[cooler]};
		#var {sb1_cooler} { CL:<130>$sb1_cooler<088>}
	} {
		#var {sb1_cooler} {}
	};
	#if {"$freezer" == "on" || $corpses[freezer] > 0} {
		#format {sb2_freezer} {%+2s} {$corpses[freezer]};
		#var {sb2_freezer} { FZ<130>$sb2_freezer<088>}
	} {
		#var {sb2_freezer} {}
	};
	#if {$gxn_last > 0} {#math {gxn_rnds} {$gxn/$gxn_last+1}};
	#math {gxn_day} {${gxn_rnds}/43200};
	#math {gxn_hr} {${gxn_rnds}/1800};
	#math {gxn_min} {${gxn_rnds} % 1800/30};
	#if {$gxn_day > 0} {
		#var {gxn_time} {<120>${gxn_day}<020>d <120>${gxn_hr}<020>h<088>}
	}; #elseif {$gxn_hr > 0} {
		#var {gxn_time} {<120>${gxn_hr}<020>h <120>${gxn_min}<020>m<088>}
	}; #elseif {$gxn_min > 0} {
		#var {gxn_time} {<120>${gxn_min}<020>m<088>}
	}; #else {
		#var {gxn_time} {<120>0<020>m<088>}
	};
	#math {gxn_earned} {$gxn_max - $gxn};
	#var {my[hp][graph]}	{@graph{$my[hp][current];$my[hp][max]}};
	#var {my[sp][graph]}	{@graph{$my[sp][current];$my[sp][max]}};
	#var {my[gp1][graph]}	{@graph{$my[gp1][current];$my[gp1][max]}};
	#var {my[gp2][graph]}	{@graph{$my[gp2][current];100}};
	#var {gxn_graph}	{@graph{$gxn_earned;$gxn_max}};
	#var {enemy[graph]}	{@graph{$enemy[hp];100}};
	#format {hp}		{%+4s} {@colscale{$my[hp][current];$my[hp][max]}};
	#format {hp_max}	{%+4s} {<128>$my[hp][max]<088>};
	#format {sp}		{%+4s} {@colscale{$my[sp][current];$my[sp][max]}};
	#format {sp_max}	{%+4s} {<128>$my[sp][max]<088>};
	#format {stm}		{%+4s} {@colscale{$my[gp1][current];$my[gp1][max]}};
	#format {stm_max}	{%+4s} {<128>$my[gp1][max]<088>};
	#format {gxn}		{%+6s} {${gxn}};
	#format {gxn_last}	{%+2s} {$gxn_last};
	#format {gxn_time}	{%+9s} {$gxn_time};
	#format {ehealth}	{%+8s} {@colscale{$enemy[hp];100}\%};
	#showme {HP:${hp}/${hp_max} SP:${sp}/${sp_max} STM:${stm}/${stm_max}  GXN: ${gxn}(${gxn_last})${gxn_time}    E:${ehealth}    IC:<130>${corpses[inventory]}<088>${sb1_cooler}} {-4};
	#showme {H:${my[hp][graph]} S:${my[sp][graph]} STM:${my[gp1][graph]} STN:${my[gp2][graph]} G:${gxn_graph} E:${enemy[graph]} CF:<130>${corpses[coffin]}<088>${sb2_freezer}} {-3};
	#line ignore {#showme {$mip[gline][1]  $mip[gline][2]} {-6}}
}

#act {{GXP: (?:[\d\,\s]+) Needed: (?:[\d\,\-]+) (?:\s+)\[\{(?:.*)\}\] ([\d\.]+)\%}} {
        #var {gxn_per} {%2};
        #format {gxn_per} {%.5s} {$gxn_per};
        #math {gxn_max} {$gxn/(1-(${gxn_per}/100))}
}

#act {^%+ dealt the killing blow to} {corpsetrig} {5}
#alias corpsetrig {
	#if {$my[gp1][current] < $my[gp1][max]*.25 || $my[gp2][current] > 25} {
		.pause
	};
	#send !rest;
	#send !wrap;
	#NOP #send !bury corpse;
	#send !get coins;
	#send !get component;
	#NOP #send !pet bela
}


/* Aliases */
#alias {remount} {
        #send !callesquire;
        #send !esq fetch mount;
        #send !mount bela;
        #send !send away
}

#alias gs2 #send !skills
#alias gs3 #send !gkills
#alias info #send !knight

#alias us {#send !unwrap;#send !bury corpse}

/* Trigs */
#act {^%w scurries over and hides behind you.} {!defend %1}

/* Joust */
#act {^You accept the challenge and you find yourself mounted on a horse with a lance.$} {mapgo jousts;#var {joust_dir} {n}}
#act {%w accepts your challenge.  You find yourself mounted on a horse with a lance.$} {mapgo joustn;#var {joust_dir} {n}}
#act {^Congratulations!  You've dismounted %w!  You move on to your next challenge...$} {mapgo challengeknight}
#act { %w has knocked you from your horse!$} {#map go 1974;mount bela}

#act {^You start the joust.$} {
	#if {"$joust_dir" == "n"} {
		mapgo joustn;
		#var {joust_dir} {s};
		s
	} {
		mapgo jousts;
		#var {joust_dir} {n};
		n
	}
}

#act {^It is your move.$} {
	#math {rand} {1d2};
	#map get {roomexits} {exits};


	#if {"$joust_dir" == "s"} {
		#regex {$exits} {s} {
			#switch {$rand} {
				#case {1} {s};
				#case {2} {#regex {$exits} {sw} {sw} {se}}
			}
		} {
			start
		}
	} {
		#regex {$exits} {n} {
			#switch {$rand} {
				#case {1} {n};
				#case {2} {#regex {$exits} {nw} {nw} {ne}}
			}
		} {
			start
		}
	}
}

/* Delays on read to initialize gxp variables */
#delay {first_hp}  {#send !hp} {4}
#delay {first_gs}  {#send !gs} {6}
#delay {second_hp} {#send !hp} {8}

#class {knight} {close}

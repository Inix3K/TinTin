#class {mapper} {open}
#NOP REQUIRED:  draw.tin

#regex {"$world"} {3s} {
	#map read .tt/map/3s.map
} {
	#map read .tt/map/3k.map
}

#var map[height] 17
#var map[width] 42
#NOP #var map[position] top

#if {"$map[$world][position]" == ""} {
	#map goto {roomnote} {home}
} {
	#map goto $map[$world][position]
}

/* Move Event */
#alias {mapupdate} {
	#map {get} {ROOMVNUM} {roomvnum};
	#map {get} {ROOMAREA} {roomarea};
	#map {get} {ROOMNAME} {roomname};
	#map {get} {ROOMDESC} {roomdesc};
	#format {roomname_len}	{%L} {$roomname};
	#format {roomvnum_len}	{%L} {$roomvnum};
	#format {roomarea_len}	{%L} {$roomarea};
	#format {roomdesc_len}	{%L} {$roomdesc};
	#math {name_len} {42-$roomvnum_len-3};
	#format {name_trunc} {%.${name_len}s} {$roomname};
	#unvar area_mapped;
	#map list {} {} {} {$roomarea} {variable} {area_mapped};
	#var {room_cnt} {&area_mapped[]};
	#if {"$draw[map]" == "on"} {
		#if {"$map[position]" == "top"} {
			#draw {tile} $map[height]-1 -$map[width] $map[height]-1 -1 {<029>$roomarea <149>(<129>$room_cnt<149>)<099>};
			#draw {tile} $map[height] -$map[width] $map[height] -1 {<149>[<039>$roomvnum<149>] <139>$name_trunc<099>}
		}; #elseif {"$map[position]" == "bottom"} {
			#draw {tile} -$status[height]-$map[height]-3 -$map[width] -$status[height]-$map[height]-3 -1 {<029>$roomarea <149>(<129>$room_cnt<149>)<099>};
			#draw {tile} -$status[height]-$map[height]-2 -$map[width] -$status[height]-$map[height]-2 -1 {<149>[<039>$roomvnum<149>] <139>$name_trunc<099>}
		}
	}
}

#event {MAP UPDATED VTMAP} {
	#delay {0.05} {mapupdate}
}

#event {MAP ENTER ROOM} {
	#if {"$mapping" == "on"} {
		mapupdate
	}
}

#event {MAP EXIT ROOM} {
	#list nouns clear
}

/* Map Follow on Following Others */
#act {^%w begins to follow %w\.} {
	#format {follower} {%l} {%1};
	#if {"$follower" == "$world"} {
		#var {following} {%2}
	}
}

#act {^You are no longer following %w\.} {
	#if {"%1" == "$following"} {
		#unvar following
	}
}

#act {%1 leaves %2\.} {
	#if {"%1" == "$following"} {
		#var foldir %2;

		#switch {"$foldir"} {
			#case {"north"}			{#var foldir n};
			#case {"south"}			{#var foldir s};
			#case {"east"}			{#var foldir e};
			#case {"west"}			{#var foldir w};
			#case {"down"}			{#var foldir d};
			#case {"up"}			{#var foldir u};
			#case {"northeast"} 		{#var foldir ne};
			#case {"northwest"}		{#var foldir nw};
			#case {"southeast"}		{#var foldir se};
			#case {"southwest"}		{#var foldir sw};
			#case {"through the portal"}	{#var foldir portal};
			#default 	#var foldir %2
		}
	}
}

#act {%w leaves following %w\.} {
	#format {follower} {%l} {%1};
	#if {"$follower" == "$world" && "%2" == "$following"} {
		#map move $foldir
	}
} {4}

/* Map Update on Wimpy */
#act {^Your legs run away with you %w.} {
	#var wimpy[dir] %1;

	#switch {"$wimpy[dir]"} {
		#case {"north"}                 {#var wimpy[dir] n};
		#case {"south"}                 {#var wimpy[dir] s};
		#case {"east"}                  {#var wimpy[dir] e};
		#case {"west"}                  {#var wimpy[dir] w};
		#case {"down"}                  {#var wimpy[dir] d};
		#case {"up"}                    {#var wimpy[dir] u};
		#case {"northeast"}             {#var wimpy[dir] ne};
		#case {"northwest"}             {#var wimpy[dir] nw};
		#case {"southeast"}             {#var wimpy[dir] se};
		#case {"southwest"}             {#var wimpy[dir] sw};
		#default        		#var wimpy[dir] %1
	};

	#NOP If stepper is on, stop stepper before moving map;
	#if {$bot == 1} {
		.stop
	};

	#NOP Update map with wimpied direction;
	#map move $wimpy[dir];
}
	

/* Data Grab Trigger */
#var longcap off
#var finding_here off

#function cartcheck {
	#format cart {%.40s} {%0};
	#if {"$cart" == "                                        " ||
	     "$cart" == ""} {
		#return 1
	} {
		#return 0
	}
}

#NOP Room Short with Exits
#act {{=S=(.*) \((.*)\)\s*=S=}} {
	#var room %2;
	#var exits %3;
	#if {"$mapping" == "on"} {
		#if {"$finding_here" == "off"} {
			#replace exits {,} {;};
			#foreach {$exits} {eachexit} {#map dig $eachexit};
			#map get {roomexit} {rexit};
			#foreach {$rexit} {eachexit} {
				#map at {$eachexit} {
					#map get {roomarea} {eacharea};
					#if {"$eacharea" == ""} {
						#map set {roomcolor} {<118>}
					}
				}
			}
		};
		#if {$roomname_len == 0} {
			#map set roomname {%2 (%3)}
		};
		#if {$roomarea_len == 0} {
			#map set roomarea {$area};
			#map set roomcolor
		};
		#if {$roomdesc_len == 0 || "$finding_here" == "on"} {
			#var longcap on;
			#var long {};
			#act {%%1} {
				#if {@cartcheck{%%1}} {
						#nop
					} {
						#var long {${long}%%1 }
				}
			} {2}
		};
		#delay 0 mapupdate
	}
}

#NOP Room Short with No Exits, Lowered Priority
#act {=S=%1%s=S=} {
	#var room %1;
	#if {"$mapping" == "on"} {
		#if {$roomname_len == 0} {
			#map set roomname {%1}
		};
		#if {$roomarea_len == 0} {
			#map set roomarea {$area};
			#map set roomcolor
		};
		#if {$roomdesc_len == 0 || "$finding_here" == "on"} {
			#var longcap on;
			#unvar long;
			#act {%%1} {
				#if {@cartcheck{%%1}} {
						#nop
					} {
						#var long {${long}%%1 }
				}
			} {2}
		};
		#map get {roomvnum} {gonum};
		#map goto $gonum;
	}
} {6}

#act {=X={.*}} {
	#if {"$longcap" == "on"} {
		#var longcap off;
		#unact {%%1};
		#if {"$finding_here" == "off"} {
			#map set roomdesc {$long}
		}
	}
} {1}

#act {AREA NAME: %1 [%2]} {
	#var area %1
}


/* Aliases */
#NOP Map position toggle
#alias {mappos} {
	#if {"%1" == "top"} {
		#screen clear square -$status[height]-$map[height]-3 -$map[width] -$status[height]-$map[height]-2 -1;
		#var map[position] top;
	}; #elseif {"%1" == "bottom"} {
		#delay 0 #screen clear square $map[height]-1 -$map[width] $map[height] -1;
		#var map[position] bottom
	}; #elseif {"%1" == ""} {
		#if {"$map[position]" == "top"} {
			#var map[position] bottom;
		} {
			#var map[position] top
		}
	}; #else {
		#echo {!INVALID MAP POSITION!}
	};
	#read .tt/3k/draw.tin
}
		
#NOP count the # of rooms mapped
#alias {area_mapped %1} {
	#unvar area_mapped;
	#map list {} {} {} {%1} {variable} {area_mapped};
	#showme {&area_mapped[] rooms mapped.};
}

#NOP Color rooms that have no area set (unexplored)
#alias nacolor {
	#loop 1 20000 {cnt} {
		#map at {$cnt} {
			#map get {roomarea} {cntarea};
			#if {"$cntarea" == ""} {#map set roomcolor <118>}
		}
	};
	#map get {roomvnum} {gonum};
	#map goto $gonum;
	#if {"$draw[map]" == "on"} {
		#if {"$map[position]" == "top"} {
			#draw {tile} $map[height]-1 -$map[width] $map[height]-1 -1 {<020>$roomarea <140>(<120>$room_cnt<140>)<099>};
			#draw {tile} $map[height] -$map[width] $map[height] -1 {<140>[<030>$roomvnum<140>] <130>$roomname<099>}
		}; #elseif {"$map[position]" == "bottom"} {
			#draw {tile} -$status[height]-$map[height]-3 -$map[width] -$status[height]-$map[height]-3 -1 {<020>$roomarea <140>(<120>$room_cnt<140>)<099>};
			#draw {tile} -$status[height]-$map[height]-2 -$map[width] -$status[height]-$map[height]-2 -1 {<140>[<030>$roomvnum<140>] <130>$roomname<099>}
		}
	}
}

#alias {go} {
	#map run {{roomnote} {%0%*}}
}

#alias {mapgo} {#map goto {roomnote} {%0}}

#alias {findhere} {
	#var finding_here on;
	rating;
	#delay 1 mapon;
	#delay 2 look;
	#delay 3 {
		#var findexits $exits;
		#replace findexits {,} {;};
		#map list {roomarea} {$area} {roomname} {$room%*} {roomexits} {$findexits} {roomdesc} {$long};
		#map list {roomarea} {$area} {roomname} {$room%*} {roomexits} {$findexits} {roomdesc} {$long} {variable} {findroom};
		#if {&findroom[] == 1} {
			#map goto *findroom[1..1]
		};
		#var finding_here off;
		mapoff
	}
}


#alias {mapsearch} {
	#show <129>Name matches:<088>;
	#map list {%i%*%0%*};
	#show \n;
	#show <129>Note matches:<088>;
	#map list {} {} {} {} {%i%*%0%*};
}

#alias {mapname %1} {
	#map name %1;
	#map write .tt/map/3k.map
}

#alias {mapsave} {
	#regex {"$world"} {3s} {
		#map write .tt/map/3s.map
	} {
		#if {"$area" == "Breed"} {
			#map write .tt/map/breed.map
		} {
			#map write .tt/map/3k.map
		}
	}
}

#alias {bmapsave} {#map write .tt/map/breed.map}

#alias {mapon} {
	#send !brief off yes;
	#map flag static off;
	#var mapstatic 1;
	#var area %1;
	#var mapping on;
}
#alias {mapoff}{
	#send !brief on yes;
	#map flag static on;
	#unvar mapstatic;
	#unvar mapping;
}
#map flag static on
#unvar mapstatic

#alias {ma} {#map set roomarea {$area}}

#NOP List all Roomnotes for 'go' alias
#alias {notelist} {
	#map list {roomnote} {%+} {variable} {noterooms};
	#foreach {*noterooms[]} {room} {#map get {roomnote} {notes[$room]} {$room}};
	#list notes sort;
	#var notes
}

#NOP Search Room Nouns (built by MIP)
#alias {sn} {
	#var noun_cnt &{nouns[]};
	#loop 1 &{nouns[]} cnt {
		exa $nouns[$cnt];
		search $nouns[$cnt]
	};
	#delay 0.5 {
		#if {$noun_cnt < &{nouns[]}} {
			#echo {<128>New items found!  Search again!<088>}
		}
	}
}

#NOP Link rooms with a void insert
#alias voidlink {
	#var dir %1;
	#var dest_num %2;
	#map link $dir $dest_num both;
	#map insert $dir void
}

/* Highmortal Portals Toggles */
#alias hmavoid {
	#map at 148 {#map exitflag {portal road} avoid on};
	#map at 148 {#map exitflag {portal eforest} avoid on};
	#map at 148 {#map exitflag {portal wforest} avoid on};
	#map at 148 {#map exitflag {efor} avoid on};
	#map at 148 {#map exitflag {portal desert} avoid on};
	#map at 148 {#map exitflag {portal ice} avoid on}
}

#alias hmfollow {
	#map at 148 {#map exitflag {portal road} avoid off};
	#map at 148 {#map exitflag {portal eforest} avoid off};
	#map at 148 {#map exitflag {portal wforest} avoid off};
	#map at 148 {#map exitflag {efor} avoid off};
	#map at 148 {#map exitflag {portal desert} avoid off};
	#map at 148 {#map exitflag {portal ice} avoid off}
}

/* House avoid for followers */
#NOP Using high weight instead of avoid so paths into house will still work, but pathing will avoid it going through town
#alias homeavoid {
	#map at 152 {#map set roomweight 100};
}

#alias homefollow {
	#map at 152 {#map set roomweight 1};
}

/* Area Specific Actions */
#NOP Section Z
#ACTION {^Just a reminder, your continue code for Section %d is %w}
{
    #variable {sectionz[%1]} {%2}
}

/* Transports */
#NOP Abyss
#act {Abyssmal Portal (s,portal)} {#map goto 5159} {1}

#NOP Android
#act {BING! The button light goes off and the elevator doors open.} {enter elevator}
#act {The elevator jerks to a halt and the doors open.} {out}
#act {The elevator is already here. How about you enter it?} {enter elevator}

#NOP Ao
#act {** The Docks of Ao ** (se)} {#map goto 15463} {1}

#NOP Ascended
#act {Arid environment (sw,n,s,e,climb)} {#map goto 16718} {1}

#NOP Ashridge Acres
#act {AREA NAME: Ashridge Acres} {
	#map get {roomvnum} {ashridge_room};
	#map goto 22486
} {4}

#NOP Calvin and Hobbes
#act {^on the snow calls to you, and you dread another day at school.} {#map goto 23824}
#act {^and eagerly await the freedom of the afternoon.} {#map goto 23814}

#NOP Chaos TV
#act {AREA NAME: Simpsons [Doh]} {
	#if {"$area" != "Simpsons"} {
		#var {area} {Simpsons};
		#map get {roomvnum} {tvroom};
		#map goto 8315;
	}
} {4}

#act {AREA NAME: Simpsons Expansion [Lostar]} {
	#var {area} {Simpsons};
} {4}

#act {AREA NAME: Simpsons Expansion [Frank]} {
	#var {area} {Simpsons Expansion};
	#map get {roomvnum} {tvroom};
	#map goto 8227
} {4}
#act {^   You dive cleanly through the computer screen!} {
	#map goto $tvroom
}

#NOP Death
#act {^You die.$} {#map goto 6247}

#NOP Death Taco
#act {^You shoot through a graceful arc, and feel weightless for the} {#map goto {roomnote} roaches}

#NOP Dragon Realms
#act {^You have to retreat against the onslaught of fire!} {#map move vortex}

#NOP Einstein
#act {^Standing on the bench, you relax and the stagedive through the rift} {#map goto 7039}

#NOP Funkytown
#act {^The intense gravity of the sun pulls the coaster to its surface where you} {#map goto 17497}

#NOP Global Merc Training Theatre
#act {^You have exited the simulation, thank you for playing.} {#map goto 15144}

#NOP Good Humor Truck
#act {^You enter the truck with one thing on your mind} {#map goto 25241}

#NOP Greenhouse
#act {^You embrace the plant and lose yourself among the vines.} {
	#map get {roomvnum} {greenhouse_room};
	#map goto 22315
}
#act {^You follow the trail away from the field.} {
	#map goto $greenhouse_room
}

#NOP Kayos Portal
#act {^You leap into the unknown!} {
	#map get {roomvnum} {num};
	#if {$num == 10278} {
		#map goto $plungeroom
	} {
		#var plungeroom $num;
		#map goto 10278
	}
}
#act {^You touch the beacon, and a friendly ship belonging to The Vigilant swings by.} {#map goto 10278}

#NOP Kyoto
#act {^=S=A Poorly-lit Street} {
	#var kyoto yes
}
#act {^=I= A large sign.} {
	#if {"$kyoto" == "yes"} {
		#map goto 25904;
		#var kyoto no
	}
}

#NOP Lost City
#act {^With a final THUD, you fly out into a pile of metal!} {#map goto 24299}
#act {^With a bit of difficulty you make your way back up the shaft} {#map goto 24297}

#NOP The Lost Village of Willothorn
#act {^You swim for your life for the surface and end up back where} {#map goto 14087}

#NOP Necromancers
#act {^You tumble down the river and find yourself on a rocky bank inside} {#map goto 7613}

#NOP Night of Colour
#act {^The balloon softly touches down, basket bumps lightly.} {exit}
#act {^You step out of the basket, into forest.} {
	#map get {roomarea} {area};
	#if {"$area" == "Night of Colour"} {
		#map goto 16359
	} {
		#map goto  16530
	}
}
#act {^You step out of the basket, into chaos.} {
	#map get {roomarea} {area};
	#if {"$area" == "Night of Colour"} {
		#map goto 16307
	} {
		#map goto 16527
	}
}

#NOP Overlands
#act {^After an unknown amount of time, you wake up and find yourself on} {#map goto 26024}
#act {^=S=At an underground lake} {
	#var overlands_raft yes
}
#act {^=I= A wooden sign.} {
	#if {"$overlands_raft" == "yes"} {
		#map goto 26022;
		#var overlands_raft no
	}
}

#NOP PG
#act {^You eat the hamburger and your environment changes!} {
	#map get {roomvnum} {pg_room};
	#map goto 22330
}
#act {^As you exit the joint you seem to reappear back in CHAOS!} {
	#map goto $pg_room
}

#NOP Phantom Ship
#act {^The ship finally reaches a small cove where it gradually} {#map goto 25844}

#NOP The Princess Bride
#act {^At last, the Cliffs of Insanity tower above you!} {#map goto 23763}
#act {^At last, the shore of Florin!} {#map goto 23737}

#NOP Puddle
#act {^You sink deep into the mud puddle!  The mud presses in on you from all} {
	#map get {roomvnum} {puddle_room};
	#map goto 22485
}

#NOP Ravenloft
#act {^You find yourself complete once more.$} {#map goto 4315}

#NOP Ravenloft Castle
#act {^You warily step out onto the cold, damp ground.} {#map goto 20756}
#act {^You then step out of the coach and find yourself back} {#map goto 4631}

#NOP Sausage Dimensions
#act {^The frankfurter SMACKS you so hard you wake up somewhere else!} {#map goto 17561}

#NOP Science Shuttle
#act {^The captain announces: Welcome to Midway Space Station.$} {exit}
#act {^The captain announces: Welcome to Houston Transport Center.$} {exit2}

#NOP Serinth
#act {^The World of Serinth Board containing } {#map goto 16722}

#NOP Starcraft:Broodwar
#act {^Door number: 3, Access Code: %1$} {#var starcraft_code %1}

#NOP Xaxis
#act {^Welcome to Xaxis!} {#map goto 15875}
#act {^Here we are folks. Welcome to the Isle of Equinity!} {#map goto 15913}

#NOP Wayhaven Ferry
#act {^The ferryman says: Well, here you are.} {#map goto 7354}


/* Blocked Exits */
#act {^You cannot go } {
	#if {$mapstatic} {
		#map undo
	}
}
#act {^You cannot get it up.} {
	#if {$mapstatic} {
		#map undo
	}
}

#NOP ** GUILDS **
#NOP Juggernauts
#act {^The room is locked.} {#map undo}
#act {^Dirk says: This area is for Wolves not } {#map undo}
#act {^Harlow says: You are not allowed here please turn around and leave at once} {#map undo}
#act {^Only members of clan jade falcon can go this way.} {#map undo}

#NOP Bards
#act {^You can't go there!} {#map undo}

#NOP ** AREAS **
#NOP Abbey
#act {^A feeling of fear and dread washes over you, preventing you from going} {#map undo}
#act {^A feeling of dread washes over you, preventing you from going any further east.} {#map undo}

#NOP Body Mansion
#act {^You bump into a locked door.} {#map undo}

#NOP Calvin and Hobbes
#act {^Calvin defends his fort!} {#map undo}
#act {^Hobbes will not let you into G.R.O.S.S. headquarters!} {#map undo}

#NOP Carnegie
#act {^Woody Allen says: You're going to have to wait for security!} {#map undo}
#act {^Mel Brooks blocks the exit.} {#map undo}
#act {^Jay-Z says: You're going to have to wait for security!} {#map undo}
#act {^Jay-Z says: Where do you think you're going?} {#map undo}
#act {^Jay-Z stops you leaving.} {#map undo}
#act {^Jay-Z blocks the exit.} {#map undo}
#act {^Trixie Hilton blocks the exit.} {#map undo}

#NOP Chaos Cinemaplex
#act {^The movie usher asks for your movie ticket. When you fail to come up with} {#map undo}

#NOP Cove of the Three (Lost Soul)
#act {^A magical force pushes you back, and you hear a voice} {#map undo}

#NOP Crystal Stairway
#act {^The Warrior will not let you invade her home any further.} {#map undo}
#act {^The warrior will not let you pass.} {#map undo}

#NOP Detroit
#act {^Officer yells: Get him, he must be stealing something!!!!} {#map undo}

#NOP Dundee
#act {^The foliage in this part of the swamp is extremely thick and will take} {#map undo}

#NOP Dragon Realms
#act {^You cannot get past the dragon guards.} {#map undo}

#NOP Elven Woods
#act {^The elf {pushes|shoves} you back, refusing to let you pass{!|.}} {#map undo}

#NOP Fallout Shelter
#act {^Core Guard jumps in your way, blocking your path!} {#map undo}

#NOP Ice Fishing
#act {^You are unable to climb the bank here.  It is very steep, and with all} {#map undo}
#act {^You can't go through a solid wall.  Try going around the shack, and} {#map undo}

#NOP Ice Mountains (Verbeeg)
#act {^The magical barrier is impenetrable.$} {#map undo}
#act {^The cryohydra snaps one of its heads at you as you try and approach} {#map undo}

#NOP Land
#act {^You are caught like a fly in a spider web, burning and twisting as} {#map undo}

#NOP Longshadow
#act {^The drawbridge is currently upright denying you access to the castle.} {#map undo}

#NOP Mage Tower
#act {^The guard blocks your passage.} {#map undo}

#NOP Night of Colour
#act {^Impediment slaps you back, thorns tearing.} {#map undo}
#act {^Serrated sword extended, Bulwark stops your progress.} {#map undo}

#NOP The Princess Bride
#act {^The guard won't allow you to pass!} {#map undo}

#NOP Rabbit Fields
#act {^The rabbit prevents you from going that way.} {#map undo}

#NOP Ravenloft
#act {^You try to go down, but suddenly feel more terrified than} {#map undo}
#act {^The trees move together and bar your path!} {#map undo}
#act {^A deathly chill blows from the south, blasting into} {#map undo}
#act {^Four dragons swoop down from the rafters and attack, blocking the way west!} {#map undo}

#NOP Rocky Hill
#act {^Waving their rusty scimitars and growling loudly, the jackalmen} {#map undo}

#NOP Section Z
#act {^The %1 will not let you pass!} {#map undo}
#act {^The portal %w is electrified and ZAPS you!} {#map undo}

#NOP Simpsons
#act {^   The Guard stops you and says: Aww no...you can't go in there.} {#map undo}

#NOP SolChem
#act {^The gang member shoves you back.} {#map undo}

#NOP Tao Te Cheng
#act {^Your understanding fails you and you cannot flee!!} {#map undo}

#NOP Theatre of Souls
#act {^A closed door blocks your way.} {#map undo}

#NOP Tomb of Kingn Alaren
#act {^The skeletal royal guard steps in front of you barring your progress.} {#map undo}
#act {^The skeletal guard steps in front of you barring your progress.} {#map undo}

#NOP Underdark
#act {^The {drow|guard} prevents you from going that way.} {#map undo}
#act {^The troll will not let you pass.} {#map undo}

#NOP Whorehouse
#act {^Doh shoves you backwards with a scowl.} {#map undo}
#act {^Your feet are mired in the bird poop, you can't seem to move!!} {#map undo}


#class {mapper} {close}
